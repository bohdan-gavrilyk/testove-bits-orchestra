{"version":3,"sources":["mock-tool/Card/Card.tsx","mock-tool/ProductList/ProductList.tsx","mock-tool/Reviews/Reviews.tsx","utils/fetchClient.ts","App.tsx","utils/api.ts","index.tsx"],"names":["library","add","faS","far","faHeart","Card","product","useState","favorite","setFavorite","isHovered","setIsHovered","className","onMouseLeave","onMouseEnter","classNames","hover","src","changingImg","mainImg","alt","icon","onClick","size","href","name","price","count","Form","Check","reverse","label","ProductList","products","Container","Stack","direction","gap","map","id","Reviews","reviews","addReview","showAllReviews","setShowAllReviews","displayedReviews","slice","validationSchema","Yup","shape","text","required","email","phone","nullable","agreement","oneOf","review","date","faStar","type","initialValues","onSubmit","values","actions","currentDate","Date","toLocaleDateString","month","day","year","formatValues","length","resetForm","errors","touched","Row","Col","FormGroup","controlId","as","placeholder","FormText","FormControl","FormCheck","FormLabel","Button","variant","BASE_URL","wait","delay","Promise","resolve","setTimeout","client","url","data","options","method","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","request","App","setProducts","setReviews","useEffect","result","Navbar","expand","Brand","to","Nav","path","element","replace","newReview","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00ca8b48.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Form } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\nimport { faHeart, faS } from '@fortawesome/free-solid-svg-icons';\nimport {\n  far,\n} from '@fortawesome/free-regular-svg-icons';\nimport './Card.scss';\nimport { Product } from '../../types/Product';\n\nlibrary.add(faS, far, faHeart);\ntype Props = {\n  product: Product;\n};\n\nexport const Card:React.FC<Props> = ({ product }) => {\n  const [favorite, setFavorite] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n\n  const handleFavorite = () => {\n    setFavorite(!favorite);\n  };\n\n  return (\n    <div\n      className=\"card\"\n      onMouseLeave={handleMouseLeave}\n      onMouseEnter={handleMouseEnter}\n    >\n      <div\n        className={classNames(\n          'card__img',\n          { hover: isHovered },\n        )}\n      >\n        <img\n          src={isHovered ? product.changingImg : product.mainImg}\n          alt=\"card-img\"\n        />\n        <FontAwesomeIcon\n          icon={favorite ? faHeart : ['far', 'heart']}\n          onClick={handleFavorite}\n          size=\"xl\"\n          className=\"card__favorite\"\n        />\n        <span className=\"card__recommend\">Shop by room</span>\n        {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n        <a href=\"#\" className=\"card__details\">Product details</a>\n      </div>\n      <div className=\"card__body\">\n        <div className=\"card__info\">\n          <p className=\"card__name\">{product.name}</p>\n          <p className=\"card__price\">{`${product.price}$`}</p>\n        </div>\n        <p className=\"card__description\">\n          COREtec Premium Lorem ipsum dolor sit amet.\n        </p>\n        <div className=\"card__footer\">\n          <div className=\"card__avalaible avalaible-card\">\n            <div\n              className={classNames('avalaible-card__circle', {\n                'avalaible-card__circle-red': product.count <= 0,\n              })}\n            />\n            <div className=\"avalaible-card__text\">{`Availeble Now ${product.count}Sf`}</div>\n          </div>\n          <div className=\"card__compare\">\n            <Form.Check reverse label=\"Compare\" />\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './ProductList.scss';\nimport { Container, Stack } from 'react-bootstrap';\nimport { Card } from '../Card';\nimport { Product } from '../../types/Product';\n\ntype Props = {\n  products: Product[]\n};\n\nexport const ProductList:React.FC<Props> = ({ products }) => {\n  return (\n    <Container>\n      <h2 className=\"subTitle\">The innovation leader in luxury vinyl plank</h2>\n      <h1 className=\"title\">Let`s Get Started</h1>\n      <Stack direction=\"horizontal\" className=\"align-items-stretch\" gap={3}>\n        {products.map(product => (\n          <Card key={product.id} product={product} />\n        ))}\n      </Stack>\n    </Container>\n  );\n};\n","import React, { useState } from 'react';\nimport './Reviews.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport {\n  Formik, Form, Field, FormikHelpers,\n} from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button, Col, FormCheck, FormControl, FormGroup, FormLabel, FormText, Row,\n} from 'react-bootstrap';\nimport { ReviewsInterface } from '../../types/ReviewsInterface';\n\ntype Props = {\n  reviews: ReviewsInterface[];\n  addReview: (newReview:ReviewsInterface) => void;\n};\n\nexport const Reviews: React.FC<Props> = ({ reviews, addReview }) => {\n  const [showAllReviews, setShowAllReviews] = useState(false);\n\n  const displayedReviews = showAllReviews ? reviews : reviews.slice(0, 1);\n  const handleReadAllReviews = () => {\n    setShowAllReviews(!showAllReviews);\n  };\n\n  const validationSchema = Yup.object().shape({\n    text: Yup.string().required('Comment is required'),\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().email('Invalid email').required('Email is required'),\n    phone: Yup.string().nullable(),\n    agreement: Yup.boolean().oneOf([true], 'Agreement is required').required('Agreement is required'),\n  });\n\n  interface FormValues {\n    text: string;\n    name: string;\n    email: string;\n    phone: string;\n    agreement: boolean;\n  }\n\n  const initialValues = {\n    text: '',\n    name: '',\n    email: '',\n    phone: '',\n    agreement: false,\n  };\n  const handleSubmit = (values:FormValues, actions: FormikHelpers<FormValues>): void => {\n    const currentDate = new Date().toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n\n    const formatValues = {\n      ...values, phone: values.phone ? values.phone : '-', date: currentDate, id: +reviews.length + 1,\n    };\n\n    addReview(formatValues);\n    actions.resetForm();\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        {displayedReviews.map(review => (\n          <div className=\"comment\" key={review.id}>\n            <p className=\"comment__name\">{review.name}</p>\n            <p className=\"comment__date\">{review.date}</p>\n            <div className=\"comment__stars\">\n              <FontAwesomeIcon icon={faStar} className=\"s1\" />\n              <FontAwesomeIcon icon={faStar} className=\"s2\" />\n              <FontAwesomeIcon icon={faStar} className=\"s3\" />\n              <FontAwesomeIcon icon={faStar} className=\"s4\" />\n              <FontAwesomeIcon icon={faStar} className=\"s5\" />\n            </div>\n            <p className=\"comment__text\">\n              {review.text}\n            </p>\n            {/* eslint-disable-next-line jsx-a11y/anchor-has-content, jsx-a11y/anchor-is-valid */}\n            <a href=\"#\" className=\"comment__link\">Read more</a>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          className=\"button border\"\n          onClick={handleReadAllReviews}\n        >\n          {showAllReviews ? 'Hide comments' : 'Read all reviews'}\n        </button>\n        <h2 className=\"Form__title\">Leave a Review</h2>\n        <p className=\"Form__subTitle\">Your email will not be published. Required fields are marked *</p>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ errors, touched }) => (\n            <Form>\n              <Row>\n                <Col>\n                  <FormGroup controlId=\"text\" className=\"\">\n                    <Field as=\"textarea\" name=\"text\" placeholder=\"Comment *\" className=\"form-control\" />\n                    {errors.text && touched.text && (\n                      <FormText>{errors.text}</FormText>\n                    )}\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <FormGroup controlId=\"name\">\n                    <Field as={FormControl} name=\"name\" placeholder=\"Name *\" />\n                    {errors.name && touched.name && <FormText>{errors.name}</FormText>}\n                  </FormGroup>\n                </Col>\n                <Col>\n                  <FormGroup controlId=\"email\">\n                    <Field as={FormControl} name=\"email\" placeholder=\"Email *\" />\n                    {errors.email && touched.email && <FormText>{errors.email}</FormText>}\n                  </FormGroup>\n                </Col>\n              </Row>\n\n              <FormGroup controlId=\"phone\">\n                <Field as={FormControl} name=\"phone\" placeholder=\"Phone (optional)\" />\n                {errors.phone && touched.phone && <FormText>{errors.phone}</FormText>}\n              </FormGroup>\n\n              <FormGroup controlId=\"agreement\">\n                <FormCheck>\n                  <Row>\n                    <Col>\n                      <Field\n                        type=\"checkbox\"\n                        name=\"agreement\"\n                        id=\"agreement\"\n                        className=\"form-check-input\"\n                      />\n                      <FormLabel className=\"form-check-label\">\n                        I agree to the terms and conditions\n                      </FormLabel>\n\n                    </Col>\n                  </Row>\n                  <Row>\n                    {errors.agreement && touched.agreement && (\n                      <FormText>{errors.agreement}</FormText>\n                    )}\n                  </Row>\n                </FormCheck>\n              </FormGroup>\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = process.env.NODE_ENV === 'development'\n  ? 'http://localhost:3001'\n  : 'https://raw.githubusercontent.com/bohdan-gavrilyk/testove-bits-orchestra/gh-pages/static/db';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Navigate, Route, Routes, Link,\n} from 'react-router-dom';\nimport { Container, Navbar, Nav } from 'react-bootstrap';\nimport { ProductList } from './mock-tool/ProductList';\nimport { Reviews } from './mock-tool/Reviews';\nimport { Product } from './types/Product';\nimport { ReviewsInterface } from './types/ReviewsInterface';\nimport './App.scss';\nimport { getProduct, getReviews } from './utils/api';\n\nexport const App: React.FC = () => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [reviews, setReviews] = useState<ReviewsInterface[]>([]);\n\n  useEffect(() => {\n    getProduct()\n      .then(result => setProducts(result));\n  }, []);\n\n  useEffect(() => {\n    getReviews()\n      .then(result => setReviews(result));\n  }, []);\n\n  const addReview = (newReview:ReviewsInterface) => {\n    setReviews([newReview, ...reviews]);\n  };\n\n  return (\n    <>\n      <Container>\n        <Navbar expand=\"lg\" variant=\"light\" className=\"justify-content-between\">\n          <Navbar.Brand><Link to=\"/\" className=\"nav-link\">Home</Link></Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Link to=\"/product-list\" className=\"nav-link\">Product List</Link>\n            <Link to=\"/reviews\" className=\"nav-link\">Reviews</Link>\n          </Nav>\n        </Navbar>\n      </Container>\n\n      <Routes>\n        <Route path=\"/\" element={<h1 className=\"title\">Home page</h1>} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"product-list\" element={<ProductList products={products} />}></Route>\n        <Route path=\"reviews\" element={<Reviews reviews={reviews} addReview={addReview} />}></Route>\n        <Route\n          path=\"*\"\n          element={(\n            <h1 className=\"title\">Page not found</h1>)}\n        />\n      </Routes>\n    </>\n  );\n};\n","import { Product } from '../types/Product';\nimport { ReviewsInterface } from '../types/ReviewsInterface';\nimport { client } from './fetchClient';\n\nconst shedule = process.env.NODE_ENV === 'development';\n\nexport const getProduct = () => {\n  return client.get<Product[]>(shedule ? '/products' : '/products.json');\n};\n\nexport const getReviews = () => {\n  return client.get<ReviewsInterface[]>(shedule ? '/reviews' : '/reviews.json');\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}